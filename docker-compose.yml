version: '3.8'
services:
  net-application: &app
    container_name: net-application
    build: ./app/
    restart: always
    networks:
      - mynetwork

  net-application2:
    <<: *app
    container_name: net-application2

  net-application3:
    <<: *app
    container_name: net-application3

  olgtm:
    image: grafana/otel-lgtm
    ports:
      - 3000:3000  # grafana (admin, admin)
      - 9090:9090  # prometheus
      - 4318:4318  # collector http
      - 4317:4317  # collector grpc
    networks:
      - mynetwork

  jenkins:
    container_name: jenkins-test
    image: jenkins/jenkins:lts
    privileged: true
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./jenkins/jenkins_home/:/var/jenkins_home/
    networks:
      - mynetwork

  nginx:
    container_name: ingress-test
    image: nginx:latest
    restart: always
    ports:
      - 80:80
    networks:
      - mynetwork
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

  ## for this container (sonarqube), require execute this command on host machine:
  ## sudo sysctl -w vm.max_map_count=262144
  sonarqube:
    container_name: sonarqube-test
    image: sonarqube:8-community
    depends_on:
      - postgres-db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres-db/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    networks: 
      - mynetwork

  postgres-db:
    container_name: postgres-test
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes: 
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    networks: 
      - mynetwork

  adminer:
    container_name: adminer-test
    image: adminer
    restart: always
    environment: 
      ADMINER_DESIGN: galkaev
    networks: 
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp: